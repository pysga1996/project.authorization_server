buildscript {
    ext {
        springBootVersion = '2.4.0'
        springCloudVersion = '2020.0.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
//    id 'com.github.jacobono.jaxb' version '1.3.5'
    id 'com.github.jacobono.wsdl' version '1.7.7'
    id "org.openrepose.gradle.plugins.jaxb" version "2.5.0"
    id 'idea'
}

group = 'com.vengeance'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude module: "logback-classic"
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-bootstrap:3.0.1'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:3.0.2'
    compile 'org.springframework.cloud:spring-cloud-starter-config:2.2.7.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-data-jdbc'
    compile 'org.springframework.session:spring-session-data-redis:2.4.0'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'
    compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity5', version: '3.0.4.RELEASE'
    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.4.0.RELEASE'
    compile group: 'org.springframework.security.oauth.boot', name: 'spring-security-oauth2-autoconfigure', version: '2.4.0'
    compile group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.8.1'
//    compile group: 'org.springframework.security', name: 'spring-security-jwt', version: '1.1.1.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server', version: '2.4.0'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    compile 'org.postgresql:postgresql'
    compile 'mysql:mysql-connector-java'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web-services'
    compile group: 'org.springframework.ws', name: 'spring-ws-security', version: '3.0.10.RELEASE'
    compile(group: 'com.sun.xml.wss', name: 'xws-security', version: '3.0') {
        exclude group: 'javax.xml.crypto', module: 'xmldsig'
        exclude group: 'javax.activation', module: 'activation'
    }
    compile group: 'wsdl4j', name: 'wsdl4j', version: '1.6.3'
    compile group: 'com.cloudinary', name: 'cloudinary-http44', version: '1.27.0'
    compile group: 'com.google.firebase', name: 'firebase-admin', version: '6.11.0'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    providedCompile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    testCompileOnly group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    testAnnotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
//    providedCompile deprecated -> compileOnly
//    compile deprecated -> implementation
    providedCompile 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'
    testCompileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile 'org.springframework.security:spring-security-test'
    jaxws 'com.sun.xml.ws:jaxws-tools:2.2.8-promoted-b131'
    jaxws 'com.sun.xml.ws:jaxws-rt:2.2.8-promoted-b131'
//    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41'
//    jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7-b41'
//    jaxb 'javax.xml.bind:jaxb-api:2.2.7'
//    jaxb 'org.glassfish.jaxb:jaxb-xjc:2.2.11'
//    jaxb 'org.glassfish.jaxb:jaxb-runtime:2.2.11'
    jaxb "com.sun.xml.bind:jaxb-xjc:2.1.7"

}

test {
    useJUnitPlatform()
}

tasks.replace("war").doLast {
    println("Replace war task")
}

war.enabled(false)

bootWar {
    enabled = false
}

bootJar {
    enabled = true
    launchScript()
}

task stage(dependsOn: ['bootJar', 'clean'])
bootJar.mustRunAfter clean

//task stage(dependsOn: ['build', 'clean'])
//build.mustRunAfter clean

//task copyToLib(type: Copy) {
//    into "$buildDir/libs"
//    from(configurations.compile)
//}
//
//stage.dependsOn(copyToLib)

gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(stage)) {
            test.enabled = false
        }
}

jaxb {
    xsdDir = "src/main/resources"
    xsdIncludes = ['**/com.lambda.client.xsd']
    xjc {
        removeOldOutput = "yes"
        header = false
        destinationDir = "generated"
        generatePackage = "com.lambda.model.dto.soap"
        accessExternalSchema = "all"
    }
}

// tag::wsdl[]
task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "http://localhost:8095/delta-notification/webservice/notification.wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema,
                    package: "com.lambda.model.ws") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

//            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
//                    debugLevel: "lines,vars,source",
//                    classpath: configurations.jaxb.asPath) {
//                src(path: sourcesDir)
//                include(name: "**/*.java")
//                include(name: "*.java")
//            }
//
            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}
// end::wsdl[]

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}
